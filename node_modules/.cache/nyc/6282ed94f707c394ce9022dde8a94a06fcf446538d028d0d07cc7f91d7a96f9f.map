{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/models/CommentModel.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/models/CommentModel.ts"],"names":[],"mappings":";;AAEA,uCAA8D;AAiB9D,kBAAe,CAAC,SAA8B,EAAE,SAA8B,EAAgB,EAAE;IAC5F,MAAM,OAAO,GACT,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE;QACxB,EAAE,EAAE;YACA,IAAI,EAAE,SAAS,CAAC,OAAO;YACvB,SAAS,EAAE,KAAK;YAChB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,IAAI;SACtB;QACD,OAAO,EAAE;YACL,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;YAC3B,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;KACJ,EAAE;QACC,SAAS,EAAE,UAAU;KACxB,CAAC,CAAA;IAEN,OAAO,CAAC,SAAS,GAAG,CAAC,MAAuB,EAAQ,EAAE;QAClD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE;YAC3B,UAAU,EAAE;gBACR,SAAS,EAAE,KAAK;gBAChB,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,MAAM;aACf;SACJ,CAAC,CAAA;QACF,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE;YAC3B,UAAU,EAAE;gBACR,SAAS,EAAE,KAAK;gBAChB,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,MAAM;aACf;SACJ,CAAC,CAAA;IACN,CAAC,CAAA;IAED,OAAO,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,eAAuB,EAAE,QAAgB,EAAW,EAAE;QAClF,OAAO,sBAAW,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;IACjD,CAAC,CAAA;IAED,OAAO,OAAO,CAAC;AACnB,CAAC,CAAA","sourcesContent":["import { UserModel } from './UserModel';\nimport { BaseModelInterface } from './../interfaces/BaseModelInterface';\nimport { genSaltSync, hashSync, compareSync } from 'bcryptjs';\nimport * as Sequelize from 'sequelize';\nimport { ModelsInterface } from '../interfaces/ModelsInterface';\n\nexport interface CommentAttributes {\n    id?: number;\n    comment?: string;\n    post?: number;\n    user?: number;\n    createdAt?: string;\n    updatedAt?: string;\n}\n\nexport interface CommentInstance extends Sequelize.Instance<CommentAttributes>, CommentAttributes { }\n\nexport interface CommentModel extends BaseModelInterface, Sequelize.Model<CommentInstance, CommentAttributes> { }\n\nexport default (sequelize: Sequelize.Sequelize, DataTypes: Sequelize.DataTypes): CommentModel => {\n    const Comment: CommentModel =\n        sequelize.define('Comment', {\n            id: {\n                type: DataTypes.INTEGER,\n                allowNull: false,\n                primaryKey: true,\n                autoIncrement: true\n            },\n            comment: {\n                type: DataTypes.STRING(255),\n                allowNull: false,\n                validate: {\n                    notEmpty: true\n                }\n            },\n        }, {\n            tableName: 'comments'\n        })\n\n    Comment.associate = (models: ModelsInterface): void => {\n        Comment.belongsTo(models.User, {\n            foreignKey: {\n                allowNull: false,\n                field: 'user',\n                name: 'user'\n            }\n        })\n        Comment.belongsTo(models.Post, {\n            foreignKey: {\n                allowNull: false,\n                field: 'post',\n                name: 'post'\n            }\n        })\n    }\n\n    Comment.prototype.isPassword = (encodedPassword: string, password: string): boolean => {\n        return compareSync(password, encodedPassword)\n    }\n\n    return Comment;\n}"]}