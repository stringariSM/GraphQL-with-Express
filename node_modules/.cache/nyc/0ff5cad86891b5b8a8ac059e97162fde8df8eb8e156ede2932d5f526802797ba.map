{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/models/UserModel.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/models/UserModel.ts"],"names":[],"mappings":";;AACA,uCAA8D;AAoB9D,kBAAe,CAAC,SAA8B,EAAE,SAA8B,EAAa,EAAE;IACzF,MAAM,IAAI,GACN,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE;QACrB,EAAE,EAAE;YACA,IAAI,EAAE,SAAS,CAAC,OAAO;YACvB,SAAS,EAAE,KAAK;YAChB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,IAAI;SACtB;QACD,IAAI,EAAE;YACF,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;YAC3B,SAAS,EAAE,KAAK;SACnB;QACD,KAAK,EAAE;YACH,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;YAC3B,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;QACD,QAAQ,EAAE;YACN,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;YAC3B,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE;gBACN,QAAQ,EAAE,IAAI;aACjB;SACJ;QACD,KAAK,EAAE;YACH,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,MAAM;aACjB,CAAC;YACF,SAAS,EAAE,IAAI;YACf,YAAY,EAAC,IAAI;SACpB;KACJ,EAAE;QACC,SAAS,EAAE,OAAO;QAClB,KAAK,EAAE;YACH,YAAY,EAAE,CAAC,IAAkB,EAAE,OAAgC,EAAQ,EAAE;gBACzE,MAAM,IAAI,GAAG,sBAAW,EAAE,CAAA;gBAC1B,IAAI,CAAC,QAAQ,GAAG,mBAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;YACjD,CAAC;YACD,YAAY,EAAE,CAAC,IAAkB,EAAE,OAAgC,EAAQ,EAAE;gBACzE,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAC;oBACzB,MAAM,IAAI,GAAG,sBAAW,EAAE,CAAA;oBAC1B,IAAI,CAAC,QAAQ,GAAG,mBAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;iBAChD;YACL,CAAC;SACJ;KACJ,CAAC,CAAA;IAEN,IAAI,CAAC,SAAS,GAAG,CAAC,MAAuB,EAAQ,EAAE;IAEnD,CAAC,CAAA;IAED,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,eAAuB,EAAE,QAAgB,EAAW,EAAE;QAC/E,OAAO,sBAAW,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;IACjD,CAAC,CAAA;IAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAA","sourcesContent":["import { BaseModelInterface } from './../interfaces/BaseModelInterface';\nimport { genSaltSync, hashSync, compareSync } from 'bcryptjs';\nimport * as Sequelize from 'sequelize';\nimport { ModelsInterface } from '../interfaces/ModelsInterface';\n\nexport interface UserAttributes {\n    id?: number;\n    name?: string;\n    email?: string;\n    password?: string;\n    photo?: string;\n}\n\nexport interface UserInstance extends Sequelize.Instance<UserAttributes>, UserAttributes {\n    isPassword(encodedPassword: string, password: string): boolean;\n}\n\nexport interface UserModel extends BaseModelInterface, Sequelize.Model<UserInstance, UserAttributes> {\n\n}\n\nexport default (sequelize: Sequelize.Sequelize, DataTypes: Sequelize.DataTypes): UserModel => {\n    const User: UserModel =\n        sequelize.define('User', {\n            id: {\n                type: DataTypes.INTEGER,\n                allowNull: false,\n                primaryKey: true,\n                autoIncrement: true\n            },\n            name: {\n                type: DataTypes.STRING(255),\n                allowNull: false\n            },\n            email: {\n                type: DataTypes.STRING(255),\n                allowNull: false,\n                unique: true,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            password: {\n                type: DataTypes.STRING(255),\n                allowNull: false,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            photo: {\n                type: DataTypes.BLOB({\n                    length: 'long'\n                }),\n                allowNull: true,\n                defaultValue:null\n            },\n        }, {\n            tableName: 'users',\n            hooks: {\n                beforeCreate: (user: UserInstance, options: Sequelize.CreateOptions): void => {\n                    const salt = genSaltSync()\n                    user.password = hashSync(user.password, salt)\n                },\n                beforeUpdate: (user: UserInstance, options: Sequelize.CreateOptions): void => {\n                    if (user.changed('password')){\n                        const salt = genSaltSync()\n                        user.password = hashSync(user.password, salt)\n                    }\n                }\n            }\n        })\n\n    User.associate = (models: ModelsInterface): void => {\n\n    }\n\n    User.prototype.isPassword = (encodedPassword: string, password: string): boolean => {\n        return compareSync(password, encodedPassword)\n    }\n\n    return User;\n}"]}