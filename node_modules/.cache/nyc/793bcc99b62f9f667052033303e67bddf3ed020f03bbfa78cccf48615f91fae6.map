{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/post/post.resolvers.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/post/post.resolvers.ts"],"names":[],"mappings":";;AAAA,gDAA+C;AAO/C,kDAAiE;AAEjE,8EAA+D;AAC/D,kEAA+D;AAIlD,QAAA,aAAa,GAAG;IAEzB,IAAI,EAAE;QACF,MAAM,EAAE,CAAC,IAAkB,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,EAAE,UAAU,EAAE,EAAkD,EAAE,IAAwB,EAAE,EAAE;YAC5I,OAAO,UAAU;iBACZ,IAAI,CAAC;gBACF,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACvB,IAAI;aACP,CAAC;iBACD,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC;QAED,QAAQ,EAAE,CAAC,IAAkB,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAwB,EAAE,EAAE;YACvF,OAAO,EAAE,CAAC,OAAO;iBACZ,OAAO,CAAC;gBACL,KAAK,EAAE;oBACH,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;iBACvB;gBACD,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,MAAM;aACjB,CAAC;iBACD,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC;KACJ;IAED,KAAK,EAAE;QACH,KAAK,EAAE,CAAC,IAAkB,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,EAAE,OAAwB,EAAE,IAAwB,EAAE,EAAE;YAC1G,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;YAEjD,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI;iBACjB,OAAO,CAAC;gBACL,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,EAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,UAAU,CAAC,EAAC,CAAC;aAC7F,CAAC;iBACD,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC;QAED,IAAI,EAAE,CAAC,IAAkB,EAAE,EAAE,EAAE,EAAE,EAAE,OAAwB,EAAE,IAAwB,EAAE,EAAE;YACrF,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACjB,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI;iBACjB,QAAQ,CAAC,EAAE,EAAE;gBACV,UAAU,EAAE,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC;aAC/F,CAAC;iBACD,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE;gBAChB,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA;gBAC1D,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC;iBACD,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC;KACJ;IAED,QAAQ,EAAE;QACN,UAAU,EAAE,6BAAO,CAAC,GAAG,6BAAa,CAAC,CAAC,CAAC,IAAkB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAA4C,EAAE,EAAE;YAChI,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAA;YAC1B,OAAO,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAc,EAAE,EAAE;gBAC/C,OAAO,EAAE,CAAC,IAAI;qBACT,MAAM,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAA;YAC1C,CAAC,CAAC;iBACG,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC,CAAC;QAEF,UAAU,EAAE,6BAAO,CAAC,GAAG,6BAAa,CAAC,CAAC,CAAC,IAAkB,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAA4C,EAAE,EAAE;YACpI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACjB,OAAO,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAc,EAAE,EAAE;gBAC/C,OAAO,EAAE,CAAC,IAAI;qBACT,QAAQ,CAAC,EAAE,CAAC;qBACZ,IAAI,CAAC,CAAC,IAAkB,EAAE,EAAE;oBACzB,kBAAU,CAAC,CAAC,IAAI,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAA;oBACjD,kBAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,EAAE,EAAE,oDAAoD,CAAC,CAAA;oBAEpG,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAA;oBAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAA;gBACjD,CAAC,CAAC,CAAA;YACV,CAAC,CAAC;iBACG,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC,CAAC;QAEF,UAAU,EAAE,6BAAO,CAAC,GAAG,6BAAa,CAAC,CAAC,CAAC,IAAkB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAA4C,EAAE,EAAE;YAC7H,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACjB,OAAO,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAc,EAAE,EAAE;gBAC/C,OAAO,EAAE,CAAC,IAAI;qBACT,QAAQ,CAAC,EAAE,CAAC;qBACZ,IAAI,CAAC,CAAC,IAAkB,EAAE,EAAE;oBACzB,kBAAU,CAAC,CAAC,IAAI,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAA;oBACjD,kBAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,EAAE,EAAE,sDAAsD,CAAC,CAAA;oBAEtG,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAA;gBAC3C,CAAC,CAAC,CAAA;YACV,CAAC,CAAC;iBACG,KAAK,CAAC,mBAAW,CAAC,CAAA;QAC3B,CAAC,CAAC;KACL;CAEJ,CAAA","sourcesContent":["import * as graphqlFields from 'graphql-fields'\n\nimport { DataLoaders } from './../../../interfaces/DataLoadersInterface';\nimport { AuthUser } from './../../../interfaces/AuthUserInterface';\nimport { PostInstance } from './../../../models/PostModel';\nimport { DbConnection } from './../../../interfaces/DbConnectionInterface';\nimport { Transaction } from 'sequelize';\nimport { handleError, throwError } from '../../../helpers/utils';\nimport { genericGetAll, genericGetById } from '../../generic';\nimport { compose } from '../../composable/composable.resolver';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { GraphQLResolveInfo } from 'graphql';\nimport { ResolverContext } from '../../../interfaces/ResolverContextInterface';\n\nexport const postResolvers = {\n\n    Post: {\n        author: (post: PostInstance, args, { dataloaders: { userLoader } }: { db: DbConnection, dataloaders: DataLoaders }, info: GraphQLResolveInfo) => {\n            return userLoader\n                .load({\n                    key: post.get('author'),\n                    info\n                })\n                .catch(handleError)\n        },\n\n        comments: (post: PostInstance, { limit = 10, offset = 0 }, { db }: { db: DbConnection }) => {\n            return db.Comment\n                .findAll({\n                    where: {\n                        post: post.get('id')\n                    },\n                    limit: limit,\n                    offset: offset\n                })\n                .catch(handleError)\n        },\n    },\n\n    Query: {\n        posts: (post: PostInstance, { limit = 10, offset = 0 }, context: ResolverContext, info: GraphQLResolveInfo) => {\n            let attributes = Object.keys(graphqlFields(info))\n\n            return context.db.Post\n                .findAll({\n                    limit: limit,\n                    offset: offset,\n                    attributes: context.requestedFields.getFields(info, {keep: ['id'], exclude: ['comments']})\n                })\n                .catch(handleError)\n        },\n\n        post: (post: PostInstance, { id }, context: ResolverContext, info: GraphQLResolveInfo) => {\n            id = parseInt(id)\n            return context.db.Post\n                .findById(id, {\n                    attributes: context.requestedFields.getFields(info, { keep: ['id'], exclude: ['comments'] })\n                })\n                .then((user: any) => {\n                    if (!user) throw new Error(`User with id ${id} not found`)\n                    return user;\n                })\n                .catch(handleError)\n        }\n    },\n\n    Mutation: {\n        createPost: compose(...authResolvers)((post: PostInstance, { input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            input.author = authUser.id\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Post\n                    .create(input, { transaction: t })\n            })\n                .catch(handleError)\n        }),\n\n        updatePost: compose(...authResolvers)((post: PostInstance, { id, input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            id = parseInt(id)\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Post\n                    .findById(id)\n                    .then((post: PostInstance) => {\n                        throwError(!post, `Post with id ${id} not found`)\n                        throwError(post.get('author') !== authUser.id, `Unauthorized! You can only edit posts by yourself.`)\n\n                        input.author = authUser.id\n                        return post.update(input, { transaction: t })\n                    })\n            })\n                .catch(handleError)\n        }),\n\n        deletePost: compose(...authResolvers)((post: PostInstance, { id }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            id = parseInt(id)\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Post\n                    .findById(id)\n                    .then((post: PostInstance) => {\n                        throwError(!post, `Post with id ${id} not found`)\n                        throwError(post.get('author') !== authUser.id, `Unauthorized! You can only delete posts by yourself.`)\n\n                        return post.destroy({ transaction: t })\n                    })\n            })\n                .catch(handleError)\n        })\n    }\n\n}"]}