{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/models/index.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/models/index.ts"],"names":[],"mappings":";;AAEA,yBAAyB;AACzB,6BAA6B;AAC7B,uCAAuC;AAEvC,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AACvD,MAAM,GAAG,GAAW,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAA;AACzD,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,SAAS,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1E,IAAI,EAAE,GAAG,IAAI,CAAC;AAEd,IAAG,CAAC,EAAE,EAAC;IACH,EAAE,GAAG,EAAE,CAAA;IAEP,iEAAiE;IACjE,MAAM,gBAAgB,GAAG;QACrB,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;KACvB,CAAA;IACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,gBAAgB,EAAC,EAAE,MAAM,CAAC,CAAA;IAElD,MAAM,SAAS,GAAwB,IAAI,SAAS,CAChD,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,QAAQ,EACf,MAAM,CACT,CAAA;IAED,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC;SACpB,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE;QACrB,MAAM,SAAS,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC;IAChH,CAAC,CAAC;SACD,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QACtB,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;IAC9B,CAAC,CAAC,CAAA;IAEN,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;QAC1C,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE;YACzB,EAAE,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SAC/B;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;CAC/B;AAED,kBAA6B,EAAE,CAAA","sourcesContent":["import { DbConnection } from '../interfaces/DbConnectionInterface';\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as Sequelize from \"sequelize\";\n\nconst basename: string = path.basename(module.filename)\nconst env: string = process.env.NODE_ENV || 'development'\nvar config = require(path.resolve(`${__dirname}./../config/config`))[env];\nlet db = null;\n\nif(!db){\n    db = {}\n\n    //Desativa os operadores, por seguranÃ§a. Isso evita SQL Injection\n    const operatorsAliases = {\n        $in: Sequelize.Op.in\n    }\n    config = Object.assign({operatorsAliases}, config)\n\n    const sequelize: Sequelize.Sequelize = new Sequelize(\n        config.database,\n        config.username,\n        config.password,\n        config\n    )\n\n    fs.readdirSync(__dirname)\n        .filter((file: string) => {\n            const fileSlice: string = file.slice(-3);\n            return (file.indexOf('.') !== 0) && (file !== basename) && ((fileSlice === '.js') || (fileSlice === '.ts'));\n        })\n        .forEach((file: string) => {\n            const model = sequelize.import(path.join(__dirname, file));\n            db[model['name']] = model;\n        })\n\n    Object.keys(db).forEach((modelName: string) => {\n        if (db[modelName].associate) {\n            db[modelName].associate(db);\n        }\n    });\n\n    db['sequelize'] = sequelize;\n}\n\nexport default <DbConnection>db"]}