{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/app.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/app.ts"],"names":[],"mappings":";;AAAA,iEAA8D;AAC9D,+EAA4E;AAC5E,mCAAkC;AAClC,+CAA8C;AAC9C,qCAAyB;AAEzB,6CAAsC;AACtC,iFAA4E;AAE5E,MAAM,GAAG;IAKL;QACI,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,CAAA;QACxB,IAAI,CAAC,IAAI,EAAE,CAAA;IACf,CAAC;IAEO,IAAI;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,+BAAc,EAAE,CAAA;QAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,qCAAiB,CAAC,gBAAE,EAAE,IAAI,CAAC,eAAe,CAAC,CAAA;QACxE,IAAI,CAAC,UAAU,EAAE,CAAA;IACrB,CAAC;IAEO,UAAU;QACd,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAEvB,6CAAoB,EAAE,EAEtB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;YACf,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,gBAAE,CAAA;YACzB,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAA;YACnE,GAAG,CAAC,SAAS,CAAC,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,eAAe,CAAA;YACxD,IAAI,EAAE,CAAA;QACV,CAAC,EAED,WAAW,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAClB,MAAM,EAAE,gBAAM;YACd,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa;YAChD,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC;SAC1B,CAAC,CAAC,CACN,CAAA;IACL,CAAC;CACJ;AAED,kBAAe,IAAI,GAAG,EAAE,CAAC,OAAO,CAAA","sourcesContent":["import { RequestedField } from './graphql/ast/RequestedField';\nimport { DataLoaderFactory } from './graphql/dataloaders/DataLoaderFactory';\nimport * as express from 'express'\nimport * as graphqlHTTP from 'express-graphql'\nimport db from './models'\n\nimport schema from './graphql/schema';\nimport { extractJwtMiddleware } from './middlewares/extract-jwt.middleware';\n\nclass App {\n    public express: express.Application\n    private dataLoaderFactory: DataLoaderFactory\n    private requestedFields: RequestedField\n\n    constructor() {\n        this.express = express()\n        this.init()\n    }\n\n    private init() {\n        this.requestedFields = new RequestedField()\n        this.dataLoaderFactory = new DataLoaderFactory(db, this.requestedFields)\n        this.middleware()\n    }\n\n    private middleware(): void {\n        this.express.use('/graphql',\n\n            extractJwtMiddleware(),\n\n            (req, res, next) => {\n                req['context']['db'] = db\n                req['context']['dataloaders'] = this.dataLoaderFactory.getLoaders()\n                req['context']['requestedFields'] = this.requestedFields\n                next()\n            },\n\n            graphqlHTTP((req) => ({\n                schema: schema,\n                graphiql: process.env.NODE_ENV === 'development',\n                context: req['context']\n            }))\n        )\n    }\n}\n\nexport default new App().express"]}