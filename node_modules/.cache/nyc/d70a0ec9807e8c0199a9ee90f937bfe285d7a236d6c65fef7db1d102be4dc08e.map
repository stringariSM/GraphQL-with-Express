{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/user/user.resolvers.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/user/user.resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import { RequestedField } from './../../ast/RequestedField';\nimport { AuthUser } from './../../../interfaces/AuthUserInterface';\nimport { genericGetAll, genericGetById } from './../../generic';\nimport { UserInstance } from './../../../models/UserModel';\nimport { DbConnection } from './../../../interfaces/DbConnectionInterface';\nimport { Transaction } from 'sequelize';\nimport { handleError, throwError } from '../../../helpers/utils';\nimport { compose } from '../../composable/composable.resolver';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { ResolverContext } from '../../../interfaces/ResolverContextInterface';\nimport { GraphQLResolveInfo } from 'graphql';\n\nexport const userResolvers = {\n\n    User: {\n        posts: (user: UserInstance, { limit = 10, offset = 0 }, context: ResolverContext, info) => {\n            return context.db.Post\n                .findAll({\n                    where: {author: user.id},\n                    limit: limit,\n                    offset: offset,\n                    attributes: context.requestedFields.getFields(info, { keep: ['id'], exclude: ['comments']})\n                })\n                .catch(handleError)\n        },\n    },\n\n    Query: {\n        users: (user: UserInstance, { limit = 10, offset = 0 }, context: ResolverContext, info: GraphQLResolveInfo) => {\n            return context.db.User\n                .findAll({\n                    limit: limit,\n                    offset: offset,\n                    attributes: context.requestedFields.getFields(info, { keep: ['id'], exclude: ['posts'] })\n                })\n                .catch(handleError)\n        },\n\n        user: (user: UserInstance, { id }, context: ResolverContext, info: GraphQLResolveInfo) => {\n            id = parseInt(id)\n            return context.db.User\n                .findById(id, {\n                    attributes: context.requestedFields.getFields(info, { keep: ['id'], exclude: ['posts'] })\n                })\n                .then((user: any) => {\n                    if (!user) throw new Error(`User with id ${id} not found`)\n                    return user;\n                })\n                .catch(handleError)\n        },\n\n        currentUser: compose(...authResolvers)((user: UserInstance, args, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            return db.User\n                .findById(authUser.id)\n                .then((user: any) => {\n                    throwError(!user, `User with id ${authUser.id} not found`)\n                    return user;\n                })\n                    .catch(handleError)\n        }),\n    },\n\n    Mutation: {\n        createUser: (user: UserInstance, { input }, { db }: { db: DbConnection }) => {\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.User\n                    .create(input, { transaction: t })\n            })\n                .catch(handleError)\n        },\n\n        updateUser: compose(...authResolvers)((user: UserInstance, { input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.User\n                    .findById(authUser.id)\n                    .then((user: UserInstance) => {\n                        throwError(!user, `User with id ${authUser.id} not found`)\n                        return user.update(input, { transaction: t })\n                    })\n            })\n                .catch(handleError)\n        }),\n\n        updateUserPassword: compose(...authResolvers)((user: UserInstance, { input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.User\n                    .findById(authUser.id)\n                    .then((user: UserInstance) => {\n                        throwError(!user, `User with id ${authUser.id} not found`)\n                        return user.update(input, { transaction: t })\n                            .then((user: UserInstance) => {\n                                return !!user\n                            })\n                    })\n            })\n                .catch(handleError)\n        }),\n\n        deleteUser: compose(...authResolvers)((user: UserInstance, args, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.User\n                    .findById(authUser.id)\n                    .then((user: UserInstance) => {\n                        throwError(!user, `User with id ${authUser.id} not found`)\n                        return user.destroy({ transaction: t })\n                    })\n            })\n                .catch(handleError)\n        })\n    }\n\n}"]}