{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/comment/comment.resolvers.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/graphql/resources/comment/comment.resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthUser } from './../../../interfaces/AuthUserInterface';\nimport { CommentInstance } from './../../../models/CommentModel';\nimport { DbConnection } from './../../../interfaces/DbConnectionInterface';\nimport { Transaction } from 'sequelize';\nimport { handleError, throwError } from '../../../helpers/utils';\nimport { compose } from '../../composable/composable.resolver';\nimport { authResolvers } from '../../composable/auth.resolver';\nimport { DataLoaders } from '../../../interfaces/DataLoadersInterface';\nimport { ResolverContext } from '../../../interfaces/ResolverContextInterface';\nimport { GraphQLResolveInfo } from 'graphql';\n\nexport const commentResolvers = {\n\n    Comment: {\n        user: (comment: CommentInstance, args, { dataloaders: { userLoader } }: { db: DbConnection, dataloaders: DataLoaders }, info: GraphQLResolveInfo) => {\n            return userLoader\n                .load({ key: comment.get('user'), info })\n                .catch(handleError)\n        },\n\n        post: (comment: CommentInstance, args, { db, dataloaders: { postLoader } }: { db: DbConnection, dataloaders: DataLoaders }, info: GraphQLResolveInfo) => {\n            return postLoader\n                .load({ key: comment.get('post'), info})\n                .catch(handleError)\n        },\n    },\n\n    Query: {\n        commentsByPost: (comment, { postId, limit = 10, offset = 0 }, context: ResolverContext, info: GraphQLResolveInfo) => {\n            postId = parseInt(postId)\n            return context.db.Comment\n                .findAll({\n                    where: {\n                        post: postId\n                    },\n                    limit: limit,\n                    offset: offset,\n                    attributes: context.requestedFields.getFields(info)\n                })\n                .catch(handleError)\n        },\n    },\n\n    Mutation: {\n        createComment: compose(...authResolvers)((comment: CommentInstance, { input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            input.user = authUser.id\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Comment\n                    .create(input, { transaction: t })\n            })\n                .catch(handleError)\n        }),\n\n        updateComment: compose(...authResolvers)((comment: CommentInstance, { id, input }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            id = parseInt(id)\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Comment\n                    .findById(id)\n                    .then((comment: CommentInstance) => {\n                        throwError(!comment, `Comment with id ${id} not found`)\n                        throwError(comment.get('user') !== authUser.id, `Unauthorized! You can only edit comment by yourself.`)\n\n                        input.user = authUser.id\n                        return comment.update(input, { transaction: t })\n                    })\n            })\n                .catch(handleError)\n        }),\n\n        deleteComment: compose(...authResolvers)((comment: CommentInstance, { id }, { db, authUser }: { db: DbConnection, authUser: AuthUser }) => {\n            id = parseInt(id)\n            return db.sequelize.transaction((t: Transaction) => {\n                return db.Comment\n                    .findById(id)\n                    .then((comment: CommentInstance) => {\n                        throwError(!comment, `Comment with id ${id} not found`)\n                        throwError(comment.get('user') !== authUser.id, `Unauthorized! You can only delete comment by yourself.`)\n\n                        return comment.destroy({ transaction: t })\n                    })\n            })\n                .catch(handleError)\n        })\n    }\n\n}"]}