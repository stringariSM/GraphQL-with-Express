{"version":3,"file":"/Users/fastpagamentos/development/Testes/graphql-2/src/middlewares/extract-jwt.middleware.ts","sources":["/Users/fastpagamentos/development/Testes/graphql-2/src/middlewares/extract-jwt.middleware.ts"],"names":[],"mappings":";;AACA,8CAAgD;AAChD,wCAA4B;AAE5B,oCAAmC;AAEtB,QAAA,oBAAoB,GAAG,GAAmB,EAAE;IAErD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAQ,EAAE;QAC7D,IAAI,aAAa,GAAW,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA,CAAC,8CAA8C;QACnG,IAAI,KAAK,GAAW,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;QAE3E,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAA;QACnB,GAAG,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,GAAG,aAAa,CAAA;QAE/C,IAAG,CAAC,KAAK,EAAE;YACP,OAAO,IAAI,EAAE,CAAA;SAChB;QAED,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,kBAAU,EAAE,EAAE,UAAU,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,OAAY,EAAE,EAAE;YAC3E,IAAG,GAAG;gBAAE,OAAO,IAAI,EAAE,CAAA;YAErB,gBAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC1B,UAAU,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;aAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,IAAkB,EAAE,EAAE;gBAE3B,IAAG,IAAI,EAAE;oBACL,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,GAAG;wBACzB,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;wBAClB,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;qBAC3B,CAAA;iBACJ;gBAED,OAAO,IAAI,EAAE,CAAA;YACjB,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC,CAAA;AAEL,CAAC,CAAA","sourcesContent":["import { UserInstance } from './../models/UserModel';\nimport { JWT_SECRET } from './../helpers/utils';\nimport db from './../models'\nimport { RequestHandler, Request, Response, NextFunction } from \"express\";\nimport * as jwt from 'jsonwebtoken'\n\nexport const extractJwtMiddleware = (): RequestHandler => {\n\n    return (req: Request, res: Response, next: NextFunction): void => {\n        let authorization: string = req.get('authorization') //Authorization  = Bearer xxxxxxx.kkkkkk.yyyyy\n        let token: string = authorization ? authorization.split(' ')[1] : undefined\n\n        req['context'] = {}\n        req['context']['authorization'] = authorization\n\n        if(!token) {\n            return next()\n        }\n\n        jwt.verify(token, JWT_SECRET, { algorithms: ['RS256'] }, (err, payload: any) => {\n            if(err) return next()\n\n            db.User.findById(payload.sub, {\n                attributes: ['id', 'email']\n            }).then((user: UserInstance) => {\n\n                if(user) {\n                    req['context']['authUser'] = {\n                        id: user.get('id'),\n                        email: user.get('email')\n                    }\n                }\n\n                return next()\n            })\n        })\n    }\n\n}"]}